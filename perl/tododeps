#!/bin/sh

# This script runs genpkg over packages provided on stdin in order
# to find dependencies of those packages. Each dependency is checked
# to see if they are not owned by the specified maintainer. If they need to
# be rebuilt, the process is repeated.
#
# webpkgs must be in our $PATH in order to check the maintainer

if [ $# -ne 1 ]
then
	echo "usage: $0 [your maintainer name] < perlood.output" 1>&2
	exit 2
fi

awk -v maint="$1" '
{
	repo[$1] = $3
	ood[$1] = 1
	todo[++todolen] = $1
}

# Use genpkg to find dependencies.
function gendeps (pkgname)
{
	delete depcnts
	delete deps
	destdir = ""

	cmd = "genpkg " pkgname
	while(cmd|getline > 0){
		destdir = $1
	}
	close(cmd)

	if(!destdir){
		print "error: genpkg " pkgname" command failed." > "/dev/stderr"
		exit 1
	}

	FS = "\n"; RS = ""
	path = destdir "/PKGDATA"
	while(getline<path > 0){
		if($1 !~ /depends$/) continue
		depslen = 0
		for(i = 2; i <= NF; i++){
			deps[$1, ++depslen] = $i
		}
		depcnts[$1] = depslen
	}
	FS = " "; RS = "\n"
	close(path)
}

function depname (depstr)
{
	if(idx = match(depstr, /[<>=]/)){
		return substr(depstr, 1, idx - 1)
	}else{
		return depstr
	}
}

function needdep (pkgname)
{
	if(pkgname in seen) return 0
	if(pkgname in ood) return 1

	fnd = 0
	cmd = "webpkgs " pkgname
	while(cmd|getline > 0){
		if($1 != pkgname) continue
		repo[$1] = $3
		fnd = 1
		if(NF < 5) break # package is an orphan
		for(j = 5; j <= NF; j++){
			if($j == maint){
				close(cmd)
				return 0
			}
		}
	}
	close(cmd)

	return (!fnd)
}

END {
	seen["perl"] = 1 # cheating
	while(todolen > 0){
		pkg = todo[todolen--]
		if(pkg in seen) continue
		seen[pkg] = 1
		print (pkg in repo ? repo[pkg] : "new"), pkg

		gendeps(pkg)
		for(dtype in depcnts){
			if((len = depcnts[dtype]) == 0) continue

			depln = dtype " "
			for(i = 1; i <= len; i++){
				depln = depln deps[dtype, i] " "
				n = depname(deps[dtype, i])
				needed = needdep(n)
				if(needed) todo[++todolen] = n
			}
			sub(/ $/, "", depln)
			print depln
		}
		print ""
	}
}
'
